/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[2,3],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,10],$V7=[1,14],$V8=[1,15],$V9=[1,23],$Va=[1,21],$Vb=[1,22],$Vc=[1,24],$Vd=[1,25],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[5,15],$Vj=[1,34],$Vk=[1,37],$Vl=[1,35],$Vm=[1,36],$Vn=[1,38],$Vo=[1,39],$Vp=[1,50],$Vq=[1,47],$Vr=[1,46],$Vs=[1,48],$Vt=[1,49],$Vu=[2,5,9,15,17,20,21,23,34,35,42,50,51,52,53,87,88,93,94],$Vv=[1,54],$Vw=[1,53],$Vx=[1,52],$Vy=[2,36,37,39,40,42,50,51,52,53],$Vz=[1,56],$VA=[2,5,9,15,17,20,21,23,34,35,42,50,51,52,53,56,57,58,87,88,93,94],$VB=[1,72],$VC=[1,71],$VD=[1,65],$VE=[1,73],$VF=[1,74],$VG=[1,66],$VH=[1,67],$VI=[1,68],$VJ=[1,70],$VK=[1,78],$VL=[1,93],$VM=[1,82],$VN=[2,52],$VO=[1,83],$VP=[1,84],$VQ=[1,85],$VR=[1,90],$VS=[1,86],$VT=[1,87],$VU=[1,88],$VV=[2,115],$VW=[2,5,9,12,15,17,19,20,21,23,31,34,35,42,50,51,52,53,56,57,58,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94],$VX=[2,108],$VY=[1,100],$VZ=[19,31],$V_=[1,118],$V$=[1,111],$V01=[1,112],$V11=[1,113],$V21=[1,114],$V31=[1,115],$V41=[1,116],$V51=[1,117],$V61=[1,119],$V71=[1,120],$V81=[1,121],$V91=[1,122],$Va1=[1,123],$Vb1=[1,124],$Vc1=[1,125],$Vd1=[1,126],$Ve1=[12,19,31,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$Vf1=[2,21],$Vg1=[1,134],$Vh1=[2,9,15,17,20,21,23,42,50,51,52,53,56,57,58,87,88,93,94],$Vi1=[2,117],$Vj1=[1,152],$Vk1=[1,163],$Vl1=[2,34],$Vm1=[2,66],$Vn1=[2,69],$Vo1=[1,211],$Vp1=[2,15,23,34,35,42,50,51,52,53],$Vq1=[2,23],$Vr1=[1,241];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_DECLARACIONES":4,"EOF":5,"DPROGRAMA":6,"VISIBILIDAD":7,"CLASE_INTERFAZ_METODO_FUNCION":8,"tk_if":9,"tk_pa":10,"EXPRESION":11,"tk_pc":12,"tk_la":13,"INSTRUCCIONES":14,"tk_lc":15,"ELSEIF":16,"tk_for":17,"DAFOR":18,"tk_pyc":19,"tk_while":20,"tk_do":21,"DECLARACION":22,"tk_id":23,"ASIGNACION_LLAMADA":24,"COMENTARIO":25,"PRINT":26,"FINERROR":27,"ASIGNACION":28,"OTRA_ASIGNACION":29,"tk_igual":30,"tk_coma":31,"tk_else":32,"ELSE":33,"tk_public":34,"tk_private":35,"tk_class":36,"tk_interface":37,"LINTERFAZ":38,"tk_static":39,"tk_void":40,"tk_main":41,"tk_string":42,"tk_ca":43,"tk_cc":44,"tk_args":45,"TIPO_METODO_FUNCION":46,"PARAMETROS":47,"DINTERFAZ":48,"DMETODONTERFAZ":49,"tk_int":50,"tk_double":51,"tk_boolean":52,"tk_char":53,"TIPO_DATO":54,"DINSTRUCCION":55,"tk_break":56,"tk_continue":57,"tk_return":58,"RETURN":59,"PARAMETRO":60,"OTRO_PARAMETRO":61,"NUMERO":62,"tk_entero":63,"tk_decimal":64,"ID_LLAMADA":65,"tk_cadena":66,"tk_true":67,"tk_false":68,"OPERADOR":69,"tk_menos":70,"VALORES":71,"tk_mayor":72,"tk_menor":73,"tk_mayorigual":74,"tk_menorigual":75,"tk_igualigual":76,"tk_noigual":77,"tk_mas":78,"tk_mul":79,"tk_div":80,"tk_and":81,"tk_or":82,"tk_not":83,"tk_xor":84,"tk_add":85,"tk_sus":86,"tk_commentu":87,"tk_commentm":88,"VARIABLE":89,"OTRA_VARIABLE":90,"ASIGNACION_VARIABLE":91,"OTRO_VALOR":92,"tk_println":93,"tk_print":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_if",10:"tk_pa",12:"tk_pc",13:"tk_la",15:"tk_lc",17:"tk_for",19:"tk_pyc",20:"tk_while",21:"tk_do",23:"tk_id",30:"tk_igual",31:"tk_coma",32:"tk_else",34:"tk_public",35:"tk_private",36:"tk_class",37:"tk_interface",39:"tk_static",40:"tk_void",41:"tk_main",42:"tk_string",43:"tk_ca",44:"tk_cc",45:"tk_args",50:"tk_int",51:"tk_double",52:"tk_boolean",53:"tk_char",56:"tk_break",57:"tk_continue",58:"tk_return",63:"tk_entero",64:"tk_decimal",66:"tk_cadena",67:"tk_true",68:"tk_false",70:"tk_menos",72:"tk_mayor",73:"tk_menor",74:"tk_mayorigual",75:"tk_menorigual",76:"tk_igualigual",77:"tk_noigual",78:"tk_mas",79:"tk_mul",80:"tk_div",81:"tk_and",82:"tk_or",83:"tk_not",84:"tk_xor",85:"tk_add",86:"tk_sus",87:"tk_commentu",88:"tk_commentm",93:"tk_println",94:"tk_print"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,8],[6,11],[6,7],[6,9],[6,2],[6,3],[6,1],[6,1],[6,2],[27,1],[27,1],[27,1],[18,1],[18,2],[28,3],[29,3],[29,0],[16,2],[16,0],[33,8],[33,3],[7,1],[7,1],[8,5],[8,5],[8,12],[8,8],[8,2],[38,2],[38,0],[48,2],[48,2],[48,2],[48,2],[49,6],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[54,1],[54,1],[54,1],[54,1],[54,1],[14,2],[14,0],[55,8],[55,11],[55,7],[55,9],[55,2],[55,2],[55,3],[55,2],[55,3],[55,1],[55,1],[55,2],[47,2],[47,0],[60,2],[61,3],[61,0],[62,1],[62,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,2],[11,2],[11,3],[11,2],[65,3],[65,0],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,1],[69,1],[59,1],[59,0],[25,1],[25,1],[22,3],[89,2],[91,2],[91,0],[90,3],[90,0],[24,2],[24,3],[24,1],[24,1],[24,2],[71,2],[71,0],[92,3],[92,0],[26,5],[26,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   this.$ = new Nodo("INICIO","");
                                    this.$.agregarHijo($$[$0-1]);
                                    var raiz = new Arbol();
                                    var contenido = "digraph G {" + raiz.recorrerDOT(this.$) + "}";
                                    fs.writeFile('codigo.dot', contenido, (err) => {
                                    if (err) throw err;
                                      raiz.execDOT();
                                    });                                  
                                    miLista.ReporteTokens();
                                    miListaE.ReporteErrores();
                                    return miListaE.getErrores();
                                
break;
case 2:
   this.$ = new Nodo("LISTA_DECLARACIONES","");
                                                        this.$.agregarHijo($$[$0-1]);
                                                        this.$.agregarHijo($$[$0]);  
                                                    
break;
case 3:
   this.$ = new Nodo("LISTA_DECLARACIONES","");
                        this.$.agregarHijo(new Nodo("E","simbolo"));
                    
break;
case 4:
  this.$ = new Nodo("DPROGRAMA","");
                                                        this.$.agregarHijo($$[$0-1]);
                                                        this.$.agregarHijo($$[$0]);  
                                                    
break;
case 5:
   this.$ = new Nodo("DPROGRAMA","");
                                                                        this.$.agregarHijo(new Nodo($$[$0-7],"palabra reservada"));
                                                                        this.$.agregarHijo(new Nodo($$[$0-6],"simbolo"));  
                                                                        this.$.agregarHijo($$[$0-5]);
                                                                        this.$.agregarHijo(new Nodo($$[$0-4],"simbolo"));
                                                                        this.$.agregarHijo(new Nodo($$[$0-3],"simbolo"));
                                                                        this.$.agregarHijo($$[$0-2]);  
                                                                        this.$.agregarHijo(new Nodo($$[$0-1],"simbolo")); 
                                                                        this.$.agregarHijo($$[$0]);  
                                                                    
break;
case 6:
   this.$ = new Nodo("DPROGRAMA","");
                                                                                                this.$.agregarHijo(new Nodo($$[$0-10],"palabra reservada"));
                                                                                                this.$.agregarHijo(new Nodo($$[$0-9],"simbolo"));  
                                                                                                this.$.agregarHijo($$[$0-8]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0-7],"simbolo"));  
                                                                                                this.$.agregarHijo($$[$0-6]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0-5],"simbolo"));  
                                                                                                this.$.agregarHijo($$[$0-4]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0-3],"simbolo")); 
                                                                                                this.$.agregarHijo(new Nodo($$[$0-2],"simbolo")); 
                                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                                                                                            
break;
case 7:
   this.$ = new Nodo("DPROGRAMA","");
                                                                    this.$.agregarHijo(new Nodo($$[$0-6],"palabra reservada"));
                                                                    this.$.agregarHijo(new Nodo($$[$0-5],"simbolo"));  
                                                                    this.$.agregarHijo($$[$0-4]);
                                                                    this.$.agregarHijo(new Nodo($$[$0-3],"simbolo")); 
                                                                    this.$.agregarHijo(new Nodo($$[$0-2],"simbolo")); 
                                                                    this.$.agregarHijo($$[$0-1]);
                                                                    this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                                                
break;
case 8:
  this.$ = new Nodo("DPROGRAMA","");
                                                                               this.$.agregarHijo(new Nodo($$[$0-8],"palabra reservada"));
                                                                               this.$.agregarHijo(new Nodo($$[$0-7],"simbolo"));  
                                                                               this.$.agregarHijo($$[$0-6]);
                                                                               this.$.agregarHijo(new Nodo($$[$0-5],"simbolo")); 
                                                                               this.$.agregarHijo(new Nodo($$[$0-4],"palabra reservada"));
                                                                               this.$.agregarHijo(new Nodo($$[$0-3],"simbolo")); 
                                                                               this.$.agregarHijo($$[$0-2]);
                                                                               this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                                                               this.$.agregarHijo(new Nodo($$[$0],"simbolo"));  
                                                                            
break;
case 9:
     this.$ = new Nodo("DPROGRAMA","");
                                this.$.agregarHijo($$[$0-1]);
                                this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                            
break;
case 10:
 this.$ = new Nodo("DPROGRAMA","");
                                        this.$.agregarHijo(new Nodo($$[$0-2],"identificador")); 
                                        this.$.agregarHijo($$[$0-1]);
                                        this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                                      
break;
case 12:
 this.$ = new Nodo("DPROGRAMA","");
              this.$.agregarHijo($$[$0]);
            
break;
case 13:
  this.$ = new Nodo("DPROGRAMA","");
                        this.$.agregarHijo(new Nodo("Error",""));                    
                        miListaE.agregarError(new Error(NumeroE, yylineno, 1, "Sintactico", yytext)); NumeroE++;  
break;
case 17:
    this.$ = new Nodo("DAFOR","");
                        this.$.agregarHijo($$[$0]);
                    
break;
case 18:
   this.$ = new Nodo("DAFOR","");
                                        this.$.agregarHijo($$[$0-1]);
                                        this.$.agregarHijo($$[$0]);
                                    
break;
case 19:
  this.$ = new Nodo("ASIGNACION","");
                                        this.$.agregarHijo(new Nodo($$[$0-2],"identificador"));
                                        this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                        this.$.agregarHijo($$[$0]);                                       
                                    
break;
case 20:
   this.$ = new Nodo("OTRA_ASIGNACION","");
                                                        this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                                        this.$.agregarHijo($$[$0-1]);
                                                        this.$.agregarHijo($$[$0]);
                                                    
break;
case 21:
   this.$ = new Nodo("OTRA_ASIGNACION","");
                        this.$.agregarHijo(new Nodo("E","simbolo"));
                    
break;
case 22:
 this.$ = new Nodo("ELSE","");
                        this.$.agregarHijo(new Nodo($$[$0-1],"palabra reservada"));
                        this.$.agregarHijo($$[$0]);
                    
break;
case 23:
   this.$ = new Nodo("ELSEIF","");
                        this.$.agregarHijo(new Nodo("E","simbolo"));
                    
break;
case 24:
   this.$ = new Nodo("ELSE","");
                                                                        this.$.agregarHijo(new Nodo($$[$0-7],"palabra reservada"));
                                                                        this.$.agregarHijo(new Nodo($$[$0-6],"simbolo"));
                                                                        this.$.agregarHijo($$[$0-5]);
                                                                        this.$.agregarHijo(new Nodo($$[$0-4],"simbolo"));
                                                                        this.$.agregarHijo(new Nodo($$[$0-3],"simbolo"));
                                                                        this.$.agregarHijo($$[$0-2]);
                                                                        this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                                                        this.$.agregarHijo($$[$0]);
                                                                    
break;
case 25:
   this.$ = new Nodo("ELSE","");
                                    this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                    this.$.agregarHijo($$[$0-1]);
                                    this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                
break;
case 26:
   this.$ = new Nodo("VISIBILIDAD","");
                            this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
                            
break;
case 27:
  this.$ = new Nodo("VISIBILIDAD","");
                    this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
                    
break;
case 28:
 this.$ = new Nodo("CLASE_INTERFAZ_METODO_FUNCION","");
                                                                                this.$.agregarHijo(new Nodo($$[$0-4],"palabra reservada"));
                                                                                this.$.agregarHijo(new Nodo($$[$0-3],"identificador"));
                                                                                this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                                                            
break;
case 29:
   this.$ = new Nodo("CLASE_INTERFAZ_METODO_FUNCION","");
                                                    this.$.agregarHijo(new Nodo($$[$0-4],"palabra reservada"));
                                                    this.$.agregarHijo(new Nodo($$[$0-3],"identificador"));
                                                    this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                                    this.$.agregarHijo($$[$0-1]);
                                                    this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                                
break;
case 30:
   this.$ = new Nodo("CLASE_INTERFAZ_METODO_FUNCION","");
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-11],"palabra reservada"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-10],"palabra reservada"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-9],"palabra reservada"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-8],"simbolo"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-7],"palabra reservada"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-6],"simbolo"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-5],"simbolo"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-4],"palabra reservada"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-3],"simbolo"));
                                                                                                        this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                                                                                        this.$.agregarHijo($$[$0-1]);
                                                                                                        this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                                                                                    
break;
case 31:
  this.$ = new Nodo("CLASE_INTERFAZ_METODO_FUNCION","");
                                                                                    this.$.agregarHijo($$[$0-7]);
                                                                                    this.$.agregarHijo(new Nodo($$[$0-6],"identificador"));
                                                                                    this.$.agregarHijo(new Nodo($$[$0-5],"simbolo"));
                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                    this.$.agregarHijo(new Nodo($$[$0-3],"simbolo"));
                                                                                    this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                    this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                                                                
break;
case 32:
  this.$ = new Nodo("CLASE_INTERFAZ_METODO_FUNCION","");
                        this.$.agregarHijo(new Nodo("Error",""));                    
                        miListaE.agregarError(new Error(NumeroE, yylineno, 1, "Sintactico", yytext)); NumeroE++; 
break;
case 33:
    this.$ = new Nodo("lINTERFAZ","");
                                    this.$.agregarHijo($$[$0-1]);
                                    this.$.agregarHijo($$[$0]);
                                    
break;
case 34:
 this.$ = new Nodo("LINTERFAZ","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 35:
 this.$ = new Nodo("DINTERFAZ","");
                                        this.$.agregarHijo($$[$0-1]);
                                        this.$.agregarHijo($$[$0]);
                                        
break;
case 36: case 37:
 this.$ = new Nodo("DINTERFAZ","");
                    this.$.agregarHijo($$[$0-1]);
                    this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                  
break;
case 38:
  this.$ = new Nodo("DINTERFAZ","");
                        this.$.agregarHijo(new Nodo("Error",""));                    
                        miListaE.agregarError(new Error(NumeroE, yylineno, 1, "Sintactico", yytext)); NumeroE++; 
break;
case 39:
   this.$ = new Nodo("DINSTRUCCION","");
                                                                            this.$.agregarHijo($$[$0-5]);
                                                                            this.$.agregarHijo(new Nodo($$[$0-4],"identificador"));
                                                                            this.$.agregarHijo(new Nodo($$[$0-3],"simbolo"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                                                            this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                                                        
break;
case 40:
  this.$ = new Nodo("TIPO_METODO_FUNCION","");
                                this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 41:
  this.$ = new Nodo("TIPO_METODO_FUNCION","");
                this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 42: case 43:
   this.$ = new Nodo("TIPO_METODO_FUNCION","");
                    this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 44:
  this.$ = new Nodo("TIPO_METODO_FUNCION","");
                    this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 45:
 this.$ = new Nodo("TIPO_METODO_FUNCION","");
                this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 46:
 this.$ = new Nodo("TIPO_DATO","");
                    this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 47: case 48:
   this.$ = new Nodo("TIPO_DATO","");
                    this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 49:
  this.$ = new Nodo("TIPO_DATO","");
                    this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 50:
 this.$ = new Nodo("TIPO_DATO","");
                this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
             
break;
case 51:
 this.$ = new Nodo("INSTRUCCIONES","");
                                            this.$.agregarHijo($$[$0-1]);
                                            this.$.agregarHijo($$[$0]);
                                            
break;
case 52:
   this.$ = new Nodo("INSTRUCCIONES","");
                        this.$.agregarHijo(new Nodo("E","simbolo"));
                    
break;
case 53:
   this.$ = new Nodo("DINSTRUCCION","");
                                                                                this.$.agregarHijo(new Nodo($$[$0-7],"palabra reservada"));
                                                                                this.$.agregarHijo(new Nodo($$[$0-6],"simbolo"));  
                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                this.$.agregarHijo(new Nodo($$[$0-4],"simbolo"));
                                                                                this.$.agregarHijo(new Nodo($$[$0-3],"simbolo"));
                                                                                this.$.agregarHijo($$[$0-2]);  
                                                                                this.$.agregarHijo(new Nodo($$[$0-1],"simbolo")); 
                                                                                this.$.agregarHijo($$[$0]);  
                                                                            
break;
case 54:
   this.$ = new Nodo("DINSTRUCCION","");
                                                                                                this.$.agregarHijo(new Nodo($$[$0-10],"palabra reservada"));
                                                                                                this.$.agregarHijo(new Nodo($$[$0-9],"simbolo"));  
                                                                                                this.$.agregarHijo($$[$0-8]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0-7],"simbolo"));  
                                                                                                this.$.agregarHijo($$[$0-6]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0-5],"simbolo"));  
                                                                                                this.$.agregarHijo($$[$0-4]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0-3],"simbolo")); 
                                                                                                this.$.agregarHijo(new Nodo($$[$0-2],"simbolo")); 
                                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                                this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                                                                                            
break;
case 55:
   this.$ = new Nodo("DINSTRUCCION","");
                                                                    this.$.agregarHijo(new Nodo($$[$0-6],"palabra reservada"));
                                                                    this.$.agregarHijo(new Nodo($$[$0-5],"simbolo"));  
                                                                    this.$.agregarHijo($$[$0-4]);
                                                                    this.$.agregarHijo(new Nodo($$[$0-3],"simbolo")); 
                                                                    this.$.agregarHijo(new Nodo($$[$0-2],"simbolo")); 
                                                                    this.$.agregarHijo($$[$0-1]);
                                                                    this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                                                
break;
case 56:
  this.$ = new Nodo("DINSTRUCCION","");
                                                                               this.$.agregarHijo(new Nodo($$[$0-8],"palabra reservada"));
                                                                               this.$.agregarHijo(new Nodo($$[$0-7],"simbolo"));  
                                                                               this.$.agregarHijo($$[$0-6]);
                                                                               this.$.agregarHijo(new Nodo($$[$0-5],"simbolo")); 
                                                                               this.$.agregarHijo(new Nodo($$[$0-4],"palabra reservada"));
                                                                               this.$.agregarHijo(new Nodo($$[$0-3],"simbolo")); 
                                                                               this.$.agregarHijo($$[$0-2]);
                                                                               this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                                                               this.$.agregarHijo(new Nodo($$[$0],"simbolo"));  
                                                                            
break;
case 57:
  this.$ = new Nodo("DINSTRUCCION","");
                         this.$.agregarHijo(new Nodo($$[$0-1],"palabra reservada")); 
                         this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                        
break;
case 58:
  this.$ = new Nodo("DINSTRUCCION","");
                            this.$.agregarHijo(new Nodo($$[$0-1],"palabra reservada")); 
                            this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                            
break;
case 59:
 this.$ = new Nodo("DINSTRUCCION","");
                                this.$.agregarHijo(new Nodo($$[$0-2],"palabra reservada")); 
                                this.$.agregarHijo($$[$0-1]);
                                this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                                
break;
case 60:
 this.$ = new Nodo("DINSTRUCCION","");
                    this.$.agregarHijo($$[$0-1]);
                    this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                  
break;
case 61:
 this.$ = new Nodo("DINSTRUCCION","");
                                        this.$.agregarHijo(new Nodo($$[$0-2],"identificador")); 
                                        this.$.agregarHijo($$[$0-1]);
                                        this.$.agregarHijo(new Nodo($$[$0],"simbolo")); 
                                      
break;
case 63:
 this.$ = new Nodo("DINSTRUCCION","");
              this.$.agregarHijo($$[$0]);
            
break;
case 64:
  this.$ = new Nodo("DINSTRUCCION","");
                        this.$.agregarHijo(new Nodo("Error",""));                    
                        miListaE.agregarError(new Error(NumeroE, yylineno, 1, "Sintactico", yytext)); NumeroE++; 
break;
case 65:
 this.$ = new Nodo("PARAMETROS","");
                                       this.$.agregarHijo($$[$0-1]);
                                       this.$.agregarHijo($$[$0]);
                                     
break;
case 66:
 this.$ = new Nodo("PARAMETROS","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 67:
    this.$ = new Nodo("PARAMETRO","");
                                this.$.agregarHijo($$[$0-1]);
                                this.$.agregarHijo(new Nodo($$[$0],"identificador"));                              
                            
break;
case 68:
 this.$ = new Nodo("OTRO_PARAMETRO","");
                                                   this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                                   this.$.agregarHijo($$[$0-1]);
                                                   this.$.agregarHijo($$[$0]);
                                                
break;
case 69:
 this.$ = new Nodo("OTRO_PARAMETRO","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 70:
 this.$ = new Nodo("NUMERO","");
                    this.$.agregarHijo(new Nodo($$[$0],"entero"));
                 
break;
case 71:
  this.$ = new Nodo("NUMERO","");
                    this.$.agregarHijo(new Nodo($$[$0],"decimal"));
                 
break;
case 72:
   this.$ = new Nodo("EXPRESION","");
                                this.$.agregarHijo(new Nodo($$[$0-1],"identificador"));
                                this.$.agregarHijo($$[$0]);
                            
break;
case 73:
  this.$ = new Nodo("EXPRESION","");
                   this.$.agregarHijo(new Nodo($$[$0],"cadena"));
                
break;
case 74: case 75:
  this.$ = new Nodo("EXPRESION","");
                  this.$.agregarHijo(new Nodo($$[$0],"palabra reservada"));
               
break;
case 76:
  this.$ = new Nodo("EXPRESION","");
                this.$.agregarHijo($$[$0]);
                
break;
case 77:
  this.$ = new Nodo("EXPRESION","");
                            this.$.agregarHijo($$[$0-1]);
                            this.$.agregarHijo($$[$0]);
                            
break;
case 78:
  this.$ = new Nodo("EXPRESION","");
                            this.$.agregarHijo(new Nodo($$[$0-1],"operador"));
                            this.$.agregarHijo($$[$0]);
                            
break;
case 79:
  this.$ = new Nodo("EXPRESION","");
                               this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                               this.$.agregarHijo($$[$0-1]);
                               this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                            
break;
case 80:
  this.$ = new Nodo("EXPRESION","");
                        this.$.agregarHijo(new Nodo("Error",""));                    
                        miListaE.agregarError(new Error(NumeroE, yylineno, 1, "Sintactico", yytext)); NumeroE++; 
break;
case 81:
 this.$ = new Nodo("ID_LLAMADA","");
                               this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                               this.$.agregarHijo($$[$0-1]);
                               this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                            
break;
case 82:
 this.$ = new Nodo("ID_LLAMADA","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 83:
 this.$ = new Nodo("OPERADOR","");
                               this.$.agregarHijo(new Nodo($$[$0-1],"operador"));
                               this.$.agregarHijo($$[$0]);
                            
break;
case 84:
 this.$ = new Nodo("OPERADOR","");
                           this.$.agregarHijo(new Nodo($$[$0-1],"operador"));
                           this.$.agregarHijo($$[$0]);
                        
break;
case 85:
 this.$ = new Nodo("OPERADOR","");
                                this.$.agregarHijo(new Nodo($$[$0-1],"operador"));
                                this.$.agregarHijo($$[$0]);
                              
break;
case 86: case 87:
 this.$ = new Nodo("OPERADOR","");
                                this.$.agregarHijo(new Nodo($$[$0-1],"operador"));
                                this.$.agregarHijo($$[$0]);
                                
break;
case 88:
 this.$ = new Nodo("OPERADOR","");
                             this.$.agregarHijo(new Nodo($$[$0-1],"operador"));
                             this.$.agregarHijo($$[$0]);
                        
break;
case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96:
 this.$ = new Nodo("OPERADOR","");
                         this.$.agregarHijo(new Nodo($$[$0-1],"operador"));
                         this.$.agregarHijo($$[$0]);
                        
break;
case 97: case 98:
 this.$ = new Nodo("OPERADOR","");
               this.$.agregarHijo(new Nodo($$[$0],"operador"));
             
break;
case 99:
 this.$ = new Nodo("RETURN","");
                    this.$.agregarHijo($$[$0]);
                  
break;
case 100:
 this.$ = new Nodo("RETURN","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 103:
 this.$ = new Nodo("DECLARACION","");
                                                       this.$.agregarHijo($$[$0-2]);
                                                       this.$.agregarHijo($$[$0-1]);
                                                       this.$.agregarHijo($$[$0]);
                                                     
break;
case 104:
 this.$ = new Nodo("VARIABLE","");
                                      this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                      this.$.agregarHijo($$[$0]);
                                       
break;
case 105:
 this.$ = new Nodo("ASIGNACION_VARIABLE","");
                                         this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                         this.$.agregarHijo($$[$0]);
                                       
break;
case 106:
 this.$ = new Nodo("ASIGNACION_VARIABLE","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 107:
 this.$ = new Nodo("OTRA_VARIABLE","");
                                                this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                                this.$.agregarHijo($$[$0-1]);
                                                this.$.agregarHijo($$[$0]);
                                              
break;
case 108:
 this.$ = new Nodo("OTRA_VARIABLE","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 109:
 this.$ = new Nodo("ASIGNACION_LLAMADA","");
                                         this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                         this.$.agregarHijo($$[$0]);
                                       
break;
case 110:
 this.$ = new Nodo("ASIGNACION_LLAMADA","");
                            this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                            this.$.agregarHijo($$[$0-1]);
                            this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                          
break;
case 111: case 112:
 this.$ = new Nodo("ASIGNACION_LLAMADA","");
               this.$.agregarHijo(new Nodo($$[$0],"operador"));
             
break;
case 113:
  this.$ = new Nodo("ASIGNACION_LLAMADA","");
                        this.$.agregarHijo(new Nodo("Error",""));                    
                        miListaE.agregarError(new Error(NumeroE, yylineno, 1, "Sintactico", yytext)); NumeroE++;  
break;
case 114:
 this.$ = new Nodo("VALORES","");
                                this.$.agregarHijo($$[$0-1]);
                                this.$.agregarHijo($$[$0]);
                              
break;
case 115:
 this.$ = new Nodo("VALORES","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 116:
 this.$ = new Nodo("OTRO_VALOR","");
                                           this.$.agregarHijo(new Nodo($$[$0-2],"simbolo"));
                                           this.$.agregarHijo($$[$0-1]);
                                           this.$.agregarHijo($$[$0]);
                                         
break;
case 117:
 this.$ = new Nodo("OTRO_VALOR","");
                    this.$.agregarHijo(new Nodo("E","simbolo"));
                  
break;
case 118: case 119:
  this.$ = new Nodo("PRINT","");
                                               this.$.agregarHijo(new Nodo($$[$0-4],"funcion"));
                                               this.$.agregarHijo(new Nodo($$[$0-3],"simbolo"));
                                               this.$.agregarHijo($$[$0-2]);
                                               this.$.agregarHijo(new Nodo($$[$0-1],"simbolo"));
                                               this.$.agregarHijo(new Nodo($$[$0],"simbolo"));
                                            
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,9:$V2,17:$V3,20:$V4,21:$V5,22:9,23:$V6,25:11,26:12,34:$V7,35:$V8,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{1:[3]},{5:[1,26]},o($Vi,$V1,{6:3,7:4,22:9,25:11,26:12,54:16,4:27,2:$V0,9:$V2,17:$V3,20:$V4,21:$V5,23:$V6,34:$V7,35:$V8,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,87:$Ve,88:$Vf,93:$Vg,94:$Vh}),{2:[1,33],8:28,36:[1,29],37:[1,30],39:[1,31],40:$Vj,42:$Vk,46:32,50:$Vl,51:$Vm,52:$Vn,53:$Vo},{10:[1,40]},{10:[1,41]},{10:[1,42]},{13:[1,43]},{19:[1,44]},{2:$Vp,10:$Vq,24:45,30:$Vr,85:$Vs,86:$Vt},o($Vu,[2,11]),o($Vu,[2,12]),{12:$Vv,15:$Vw,19:$Vx,27:51},o($Vy,[2,26]),o($Vy,[2,27]),{23:$Vz,89:55},o($VA,[2,101]),o($VA,[2,102]),{10:[1,57]},{10:[1,58]},{23:[2,46]},{23:[2,47]},{23:[2,48]},{23:[2,49]},{23:[2,50]},{1:[2,1]},o($Vi,[2,2]),o($Vu,[2,4]),{23:[1,59]},{23:[1,60]},{40:[1,61]},{23:[1,62]},{12:$Vv,15:$Vw,19:$Vx,27:63},{23:[2,40]},{23:[2,41]},{23:[2,42]},{23:[2,43]},{23:[2,44]},{23:[2,45]},{2:$VB,10:$VC,11:64,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{18:75,22:76,23:$VK,28:77,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16},{2:$VB,10:$VC,11:79,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VL,9:$VM,14:80,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},o($Vu,[2,9]),{19:[1,94]},{2:$VB,10:$VC,11:95,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:97,12:$VV,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ,71:96},{19:[2,111]},{19:[2,112]},{12:$Vv,15:$Vw,19:$Vx,27:98},o($Vu,[2,13]),o($VW,[2,14]),o($VW,[2,15]),o($VW,[2,16]),{19:$VX,31:$VY,90:99},o($VZ,[2,106],{91:101,30:[1,102]}),{2:$VB,10:$VC,11:103,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:104,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{13:[1,105]},{13:[1,106]},{41:[1,107]},{10:[1,108]},o($Vu,[2,32]),{12:[1,109],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},o($Ve1,[2,82],{65:127,10:[1,128]}),o($Ve1,[2,73]),o($Ve1,[2,74]),o($Ve1,[2,75]),o($Ve1,[2,76]),{2:$VB,10:$VC,11:129,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:130,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{12:$Vv,15:$Vw,19:$Vx,27:131},o($Ve1,[2,70]),o($Ve1,[2,71]),{19:[1,132]},{19:[2,17]},{19:$Vf1,29:133,31:$Vg1},{30:[1,135]},{12:[1,136],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{15:[1,137]},{2:$VL,9:$VM,14:138,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{10:[1,139]},{10:[1,140]},{10:[1,141]},{13:[1,142]},{19:[1,143]},{19:[1,144]},{2:$VB,10:$VC,11:146,19:[2,100],23:$VD,59:145,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{19:[1,147]},{2:$Vp,10:$Vq,24:148,30:$Vr,85:$Vs,86:$Vt},o($Vh1,[2,62]),o($Vh1,[2,63]),{12:$Vv,15:$Vw,19:$Vx,27:149},o($Vu,[2,10]),{19:[2,109],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{12:[1,150]},{12:$Vi1,31:$Vj1,69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1,92:151},{19:[2,113]},{19:[2,103]},{23:$Vz,89:153},o($VZ,[2,104]),{2:$VB,10:$VC,11:154,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{12:[1,155],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{12:[1,156],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{2:$V0,4:157,6:3,7:4,9:$V2,15:$V1,17:$V3,20:$V4,21:$V5,22:9,23:$V6,25:11,26:12,34:$V7,35:$V8,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{2:$Vk1,7:160,15:$Vl1,22:161,23:$VK,28:162,34:$V7,35:$V8,38:158,42:$V9,48:159,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16},{10:[1,164]},{12:$Vm1,42:$V9,47:165,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:167,60:166},{13:[1,168]},o($Ve1,[2,77]),{2:$VB,10:$VC,11:169,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:170,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:171,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:172,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:173,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:174,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:175,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:176,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:177,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:178,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:179,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:180,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:181,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VB,10:$VC,11:182,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},o($Ve1,[2,97]),o($Ve1,[2,98]),o($Ve1,[2,72]),{2:$VB,10:$VC,11:97,12:$VV,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ,71:183},o($Ve1,[2,78],{69:110}),{12:[1,184],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},o($Ve1,[2,80]),{2:$VB,10:$VC,11:185,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{19:[2,18]},{23:$VK,28:186},{2:$VB,10:$VC,11:187,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{13:[1,188]},{20:[1,189]},{15:[2,51]},{2:$VB,10:$VC,11:190,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{18:191,22:76,23:$VK,28:77,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16},{2:$VB,10:$VC,11:192,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{2:$VL,9:$VM,14:193,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},o($Vh1,[2,57]),o($Vh1,[2,58]),{19:[1,194]},{19:[2,99],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},o($Vh1,[2,60]),{19:[1,195]},o($Vh1,[2,64]),{19:[2,110]},{12:[2,114]},{2:$VB,10:$VC,11:196,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{19:$VX,31:$VY,90:197},o($VZ,[2,105],{69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1}),{19:[1,198]},{19:[1,199]},{15:[1,200]},{15:[1,201]},{2:$Vk1,7:160,15:$Vl1,22:161,23:$VK,28:162,34:$V7,35:$V8,38:202,42:$V9,48:159,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16},{40:$Vj,42:$Vk,46:204,49:203,50:$Vl,51:$Vm,52:$Vn,53:$Vo},{19:[1,205]},{19:[1,206]},{12:$Vv,15:$Vw,19:$Vx,27:207},{42:[1,208]},{12:[1,209]},{12:$Vn1,31:$Vo1,61:210},{23:[1,212]},{2:$VL,9:$VM,14:213,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},o($Ve1,[2,83],{69:110}),o($Ve1,[2,84],{69:110}),o($Ve1,[2,85],{69:110}),o($Ve1,[2,86],{69:110}),o($Ve1,[2,87],{69:110}),o($Ve1,[2,88],{69:110}),o($Ve1,[2,89],{69:110}),o($Ve1,[2,90],{69:110}),o($Ve1,[2,91],{69:110}),o($Ve1,[2,92],{69:110}),o($Ve1,[2,93],{69:110}),o($Ve1,[2,94],{69:110}),o($Ve1,[2,95],{69:110}),o($Ve1,[2,96],{69:110}),{12:[1,214]},o($Ve1,[2,79]),{19:[1,215],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{19:$Vf1,29:216,31:$Vg1},o($VZ,[2,19],{69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1}),{2:$VL,9:$VM,14:217,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{10:[1,218]},{12:[1,219],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{19:[1,220]},{12:[1,221],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{15:[1,222]},o($Vh1,[2,59]),o($Vh1,[2,61]),{12:$Vi1,31:$Vj1,69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1,92:223},{19:[2,107]},o($VA,[2,118]),o($VA,[2,119]),o($Vu,[2,28]),o($Vu,[2,29]),{15:[2,33]},o($Vp1,[2,35]),{23:[1,224]},o($Vp1,[2,36]),o($Vp1,[2,37]),o($Vp1,[2,38]),{43:[1,225]},{13:[1,226]},{12:[2,65]},{42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:167,60:227},o([12,31],[2,67]),{15:[1,228]},o($Ve1,[2,81]),{2:$VB,10:$VC,11:229,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{19:[2,20]},{15:[1,230]},{2:$VB,10:$VC,11:231,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{13:[1,232]},{2:$VB,10:$VC,11:233,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{13:[1,234]},{20:[1,235]},{12:[2,116]},{10:[1,236]},{44:[1,237]},{2:$VL,9:$VM,14:238,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{12:$Vn1,31:$Vo1,61:239},o($Vu,$Vq1,{16:240,32:$Vr1}),{12:[1,242],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},o($Vu,[2,7]),{12:[1,243],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{2:$VL,9:$VM,14:244,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{19:[1,245],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{2:$VL,9:$VM,14:246,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{10:[1,247]},{12:$Vm1,42:$V9,47:248,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:167,60:166},{45:[1,249]},{15:[1,250]},{12:[2,68]},o($Vu,[2,5]),{9:[1,252],13:[1,253],33:251},{13:[1,254]},{19:[1,255]},{15:[1,256]},{2:$VB,10:$VC,11:257,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{15:[1,258]},{2:$VB,10:$VC,11:259,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{12:[1,260]},{12:[1,261]},o($Vu,[2,31]),o($VA,[2,22]),{10:[1,262]},{2:$VL,9:$VM,14:263,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{2:$VL,9:$VM,14:264,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},o($Vu,[2,8]),o($Vh1,$Vq1,{16:265,32:$Vr1}),{12:[1,266],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},o($Vh1,[2,55]),{12:[1,267],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{19:[1,268]},{13:[1,269]},{2:$VB,10:$VC,11:270,23:$VD,62:69,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,70:$VJ},{15:[1,271]},{15:[1,272]},o($Vh1,[2,53]),{13:[1,273]},{19:[1,274]},o($Vp1,[2,39]),{2:$VL,9:$VM,14:275,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},{12:[1,276],69:110,70:$V_,72:$V$,73:$V01,74:$V11,75:$V21,76:$V31,77:$V41,78:$V51,79:$V61,80:$V71,81:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},o($VA,[2,25]),o($Vu,[2,6]),{2:$VL,9:$VM,14:277,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},o($Vh1,[2,56]),{15:[1,278]},{13:[1,279]},{15:[1,280]},o($Vu,[2,30]),{2:$VL,9:$VM,14:281,15:$VN,17:$VO,20:$VP,21:$VQ,22:89,23:$VR,25:91,26:92,42:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:16,55:81,56:$VS,57:$VT,58:$VU,87:$Ve,88:$Vf,93:$Vg,94:$Vh},o($Vh1,[2,54]),{15:[1,282]},o($VA,$Vq1,{16:283,32:$Vr1}),o($VA,[2,24])],
defaultActions: {21:[2,46],22:[2,47],23:[2,48],24:[2,49],25:[2,50],26:[2,1],34:[2,40],35:[2,41],36:[2,42],37:[2,43],38:[2,44],39:[2,45],48:[2,111],49:[2,112],76:[2,17],98:[2,113],99:[2,103],133:[2,18],138:[2,51],150:[2,110],151:[2,114],197:[2,107],202:[2,33],210:[2,65],216:[2,20],223:[2,116],239:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Nodo = require('../AST/nodoArbol');
    const Arbol = require('../AST/recorridoArbol');
    const Token = require('../AST/token');
    const Lista = require('../AST/listaTokens');
    const Error = require('../AST/error');
    const ListaE = require('../AST/listaErrores');
    const fs = require('fs');
    var miLista = new Lista();
    var miListaE = new ListaE();
    var Numero = 1;
    var NumeroE = 1;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 45; 
break;
case 1: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 34; 
break;
case 2: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 36; 
break;
case 3: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 37; 
break;
case 4: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 50; 
break;
case 5: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 53; 
break;
case 6: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 42; 
break;
case 7: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 51; 
break;
case 8: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 40; 
break;
case 9: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 17; 
break;
case 10: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 20; 
break;
case 11: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 21; 
break;
case 12: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 9; 
break;
case 13: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 32; 
break;
case 14: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 56; 
break;
case 15: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 57; 
break;
case 16: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 58; 
break;
case 17: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 52; 
break;
case 18: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 67; 
break;
case 19: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 68; 
break;
case 20: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 39; 
break;
case 21: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 35; 
break;
case 22: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "palabra reservada", yy_.yytext)); Numero++; return 41; 
break;
case 23: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "funcion", yy_.yytext)); Numero++; return 93; 
break;
case 24: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "funcion", yy_.yytext)); Numero++; return 94; 
break;
case 25: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador logico", yy_.yytext)); Numero++; return 81; 
break;
case 26: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador logico", yy_.yytext)); Numero++; return 82; 
break;
case 27: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador aritmetico", yy_.yytext)); Numero++; return 85; 
break;
case 28: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador aritmetico", yy_.yytext)); Numero++; return 86; 
break;
case 29: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador relacional", yy_.yytext)); Numero++; return 74; 
break;
case 30: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador relacional", yy_.yytext)); Numero++; return 75; 
break;
case 31: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador relacional", yy_.yytext)); Numero++; return 76; 
break;
case 32: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador relacional", yy_.yytext)); Numero++; return 77; 
break;
case 33: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador relacional", yy_.yytext)); Numero++; return 72; 
break;
case 34: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador relacional", yy_.yytext)); Numero++; return 73; 
break;
case 35: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador logico", yy_.yytext)); Numero++; return 83; 
break;
case 36: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador logico", yy_.yytext)); Numero++; return 84; 
break;
case 37: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 31; 
break;
case 38: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 43; 
break;
case 39: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 44; 
break;
case 40: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 13; 
break;
case 41: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 15; 
break;
case 42: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 10; 
break;
case 43: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 12; 
break;
case 44: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 19; 
break;
case 45: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador aritmetico", yy_.yytext)); Numero++; return 78; 
break;
case 46: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador aritmetico", yy_.yytext)); Numero++; return 70; 
break;
case 47: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador aritmetico", yy_.yytext)); Numero++; return 79; 
break;
case 48: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "operador aritmetico", yy_.yytext)); Numero++; return 80; 
break;
case 49: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 30; 
break;
case 50: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "simbolo", yy_.yytext)); Numero++; return 'tk_punto'; 
break;
case 51: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "cadena", yy_.yytext)); Numero++; return 66; 
break;
case 52: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "numerico", yy_.yytext)); Numero++; return 64;  
break;
case 53: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "numerico", yy_.yytext)); Numero++;  return 63;  
break;
case 54: miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "identificador", yy_.yytext)); Numero++;  return 23; 
break;
case 55: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "comentario", yy_.yytext)); Numero++;  return 87; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); miLista.agregarToken(new Token(Numero, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "comentario", yy_.yytext)); Numero++;  return 88; 
break;
case 57:  /*Los Ignoramos*/   
break;
case 58:  return 5;   
break;
case 59: miListaE.agregarError(new Error(NumeroE, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "Lexico", "El caracter " + yy_.yytext + "no pertenece al lenguaje.")); NumeroE++; 
break;
}
},
rules: [/^(?:args\b)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:static\b)/,/^(?:private\b)/,/^(?:main\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:\^)/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:\.)/,/^(?:"[^\"]*")/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:[\/][\/].*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}